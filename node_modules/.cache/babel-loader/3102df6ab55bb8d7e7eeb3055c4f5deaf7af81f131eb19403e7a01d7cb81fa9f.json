{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, signInWithRedirect, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC7Gv3AyS0ApLh08M6zSmIebI8_Y9nHOEI\",\n  authDomain: \"crown-clothing-db-4286d.firebaseapp.com\",\n  projectId: \"crown-clothing-db-4286d\",\n  storageBucket: \"crown-clothing-db-4286d.appspot.com\",\n  messagingSenderId: \"1035979517490\",\n  appId: \"1:1035979517490:web:dc6c783bec8147e227162b\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthuserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createAuthuserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","signInWithRedirect","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthuserWithEmailAndPassword","password"],"sources":["/Users/betty/Desktop/Tutorial/React/ecommerce-page-with-react/src/util/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, signInWithRedirect, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC7Gv3AyS0ApLh08M6zSmIebI8_Y9nHOEI\",\n    authDomain: \"crown-clothing-db-4286d.firebaseapp.com\",\n    projectId: \"crown-clothing-db-4286d\",\n    storageBucket: \"crown-clothing-db-4286d.appspot.com\",\n    messagingSenderId: \"1035979517490\",\n    appId: \"1:1035979517490:web:dc6c783bec8147e227162b\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    if(!userAuth) return;\n    \n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const userSnapshot = await getDoc(userDocRef);\n\n    if (!userSnapshot.exists()) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date;\n        try {\n            await setDoc(userDocRef, { displayName, email, createdAt });\n        }\n        catch (error) {\n            console.log('error creating the user', error.message);\n        }\n    }\n\n    return userDocRef;\n\n\n};\n\nexport const createAuthuserWithEmailAndPassword = async (email, password) => {\n\n    if(!email || !password) return;\n\n    return await createAuthuserWithEmailAndPassword(auth, email, password);\n}\n\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,8BAA8B,QAAQ,eAAe;AAChI,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,yCAAyC;EACrDC,SAAS,EAAE,yBAAyB;EACpCC,aAAa,EAAE,qCAAqC;EACpDC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAId,kBAAkB,EAAE;AAEzCc,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAAE;AAC7B,OAAO,MAAMqB,qBAAqB,GAAG,MAAMpB,eAAe,CAACmB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAG,MAAMpB,kBAAkB,CAACkB,IAAI,EAAEH,QAAQ,CAAC;AAEhF,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAG,CAACA,QAAQ,EAAE;EAEd,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EACjD,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;EAE7C,IAAI,CAACE,YAAY,CAACC,MAAM,EAAE,EAAE;IACxB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IACvC,MAAMO,SAAS,GAAG,IAAIC,IAAI;IAC1B,IAAI;MACA,MAAMzB,MAAM,CAACkB,UAAU,EAAE;QAAEI,WAAW;QAAEC,KAAK;QAAEC;MAAU,CAAC,CAAC;IAC/D,CAAC,CACD,OAAOE,KAAK,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACzD;EACJ;EAEA,OAAOX,UAAU;AAGrB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAK,EAAEQ,QAAQ,KAAK;EAEzE,IAAG,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAExB,OAAO,MAAMD,kCAAkC,CAAClB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AAC1E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}